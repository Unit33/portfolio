/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return toggleClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return smoothScrollTo; });
/**
 * Toggle active class from element
 * @param {*String} className 
 * @param {*String} keyWord 
 */
function toggleClass(className, keyWord) {
    document.querySelector('.' + className).classList.toggle(className + '_' + keyWord);
}

/**
 * Smooth scroll to element
 * @param {*String or html element} element 
 * @param {*Number} duration (ms) 
 */
function smoothScrollTo(element, duration) {
    /* checking type of element. If it's a string select this element by class name, else work whith html element */
    /* in other words we can pass in function class name or html element*/
    var targetBlock =
        typeof element === 'string' ?
        document.querySelector('.' + element) :
        element;

    var duration = duration || 300;
    var startPoint = window.pageYOffset;
    var distance = Math.ceil(targetBlock.getBoundingClientRect().top);
    var iteration = 120;
    var endPoint = distance + startPoint;
    var distancePerTick = distance / iteration;
    var sumParts = Math.ceil(startPoint + distancePerTick);
    var tickTime = Math.ceil(duration / iteration);

    var animate = setTimeout(function tick() {
        if (distance < 150 && distance > 0) {
            window.scrollTo(0, endPoint);
            return;
        }
        window.scrollTo(0, sumParts);
        iteration--;
        sumParts += distancePerTick;
        animate = setTimeout(tick, tickTime);
        if (iteration <= 0) {
            clearTimeout(animate);
        }
    }, tickTime)
}



/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(0);


/* activate hamburger menu and animate it */
let hamMenu = (function() {
    function init() {
        var hamBtn = document.querySelector('.hamburger-bnt');
        var menuItem = [].slice.call(document.querySelectorAll('.ham-menu__item'));

        hamBtn.addEventListener('click', function(e) {
            var timer = 0;

            /* scroll ban then menu is active  */
            if (hamBtn.className === 'hamburger-bnt') {
                document.body.style.overflow = 'hidden';
            } else {
                document.body.style.overflow = 'initial';
            }

            Object(__WEBPACK_IMPORTED_MODULE_0__helpers__["b" /* toggleClass */])('ham-menu', 'active');
            Object(__WEBPACK_IMPORTED_MODULE_0__helpers__["b" /* toggleClass */])('hamburger-bnt', 'active');

            menuItem.forEach(function(item) {
                /* appearing menu items whith delay */
                if (item.className === 'ham-menu__item') {
                    setTimeout(function() {
                        item.classList.toggle('ham-menu__item_active')
                    }, timer);
                    timer += 150;
                } else {
                    item.classList.toggle('ham-menu__item_active')
                }
            })
        })
    }

    return {
        init: init
    }
})();

/* harmony default export */ __webpack_exports__["a"] = (hamMenu);

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Valedate form filds or eny strings
 * 
 * @class Validator
 * 
 * @param {Object} config 
 * @param {Object} types 
 */
class Validator {
    constructor(config, types) {
        this.config = config;
        this.messages = {};
        this.types = {
            isNonEmpty: {
                validate(value) {
                    return value.length !== 0;
                },
                instructions: 'Поле не может быть пустым'
            },
            isAlphaNum: {
                validate(value) {
                    return !/[^а-яА-Яa-zA-Z0-9]/i.test(value);
                },
                instructions: 'Поле может состоять только из букв и цифр, никаких специальных символов или пробелов'
            },
            isNumber: {
                validate(value) {
                    return !isNaN(value);
                },
                instructions: 'Значение, вводимое в поле, должно быть числом'
            }
        };

        if (types) {
            Object.assign(this.types, types);
        }

        console.log('Validator created!');
    }

    validate(data) {

        var i, msg, type, cheker, isOk, count;

        this.messages = {};

        for (i in data) {
            if (data.hasOwnProperty(i)) {
                type = this.config[i];

                if (Array.isArray(type)) {
                    count = type.length;
                } else {
                    count = 1;
                    type = [type];
                }

                for (var j = 0; j < count; j++) {

                    cheker = this.types[type[j]];

                    if (!type[j]) {
                        continue;
                    }

                    if (!cheker) {
                        throw {
                            name: 'ValidationError',
                            message: 'Не предусмотрено проверок!'
                        }
                    }

                    isOk = cheker.validate(data[i]);

                    if (!isOk) {
                        msg = cheker.instructions;

                        if (!this.messages[i]) {
                            this.messages[i] = [];
                        }

                        this.messages[i].push(msg);
                    }
                }
            }
        }
        return this.hasErrors();
    }
    hasErrors() {
        return Object.keys(this.messages).length !== 0;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (Validator);

/***/ }),
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_hamburgerMenu__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_helpers__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_worksPageFormValidation__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_slider__ = __webpack_require__(10);
console.log('my-works page')






__WEBPACK_IMPORTED_MODULE_2__common_worksPageFormValidation__["a" /* default */].init();
__WEBPACK_IMPORTED_MODULE_3__common_slider__["a" /* default */].init();
__WEBPACK_IMPORTED_MODULE_0__common_hamburgerMenu__["a" /* default */].init();

/* scrol down to my-works section */
var downBtn = document.querySelector('.arrow-down ');
downBtn.addEventListener('click', function() {
        Object(__WEBPACK_IMPORTED_MODULE_1__common_helpers__["a" /* smoothScrollTo */])('my-works', 400);
    })
    /* scrol up to my-works section */
var upBtn = document.querySelector('.arrow-up__btn');
upBtn.addEventListener('click', function() {
    Object(__WEBPACK_IMPORTED_MODULE_1__common_helpers__["a" /* smoothScrollTo */])('my-works', 500);
})

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__validator__ = __webpack_require__(2);


let worksFormValidation = (function() {
    function init() {
        const submitBtn = document.querySelectorAll('.feedback-form__btn')[0];
        const resetBtn = document.querySelectorAll('.feedback-form__btn')[1];

        // представляем данные формы в виде объекта
        let indexForm = {
            nameField: {
                input: document.querySelectorAll('.feedback-form__input')[0],
                popUp: document.querySelectorAll('.feedback__pop-up')[0],
            },
            emailField: {
                input: document.querySelectorAll('.feedback-form__input')[1],
                popUp: document.querySelectorAll('.feedback__pop-up')[1],
            },
            showError(element) {
                element.input.classList.add('feedback-form__input_error');
                element.popUp.style.display = 'block';
                setTimeout(function() {
                    element.popUp.style.display = 'none';
                }, 2000)
            },
            showCorrect(element) {
                element.input.classList.add('feedback-form__input_correct');
            },
            resetField(element, full = false) {
                element.popUp.style.display = 'none'
                element.input.className = 'feedback-form__input';

                /* сбрасывать значение формы, по умолчанию нет */
                if (full) {
                    element.input.value = '';
                }
            }
        }


        /* сброс формы */
        resetBtn.addEventListener('click', () => {
            indexForm.resetField(indexForm.nameField);
            indexForm.resetField(indexForm.emailField);
        })

        // создаем конфиг, по каким парамертам будем проверять поля
        const config = {
            name: ['isNonEmpty', 'isAlphaNum'],
            email: ['isNonEmpty', 'isCorrectEmail']
        }

        /* добавляем проверку email */
        let emailValidator = {
            isCorrectEmail: {
                re: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
                validate(value) {
                    return this.re.test(value);
                },
                instructions: 'Такого почтового адреса не существует'
            }
        }

        // создаем экземпляр объекта валидатора
        const validator = new __WEBPACK_IMPORTED_MODULE_0__validator__["a" /* default */](config, emailValidator);

        // по щелчку мыши собираются данные из полей форм.
        // сообщения об ошибках заносятся в массив validator.messages
        // 
        submitBtn.addEventListener('click', (e) => {
            e.preventDefault();
            let data = {
                name: indexForm.nameField.input.value,
                email: indexForm.emailField.input.value
            };

            validator.validate(data);
            indexForm.resetField(indexForm.nameField);
            indexForm.resetField(indexForm.emailField);
            if (validator.hasErrors()) {

                /* если поле логина и поле пароля не верно */
                if (validator.messages.name && validator.messages.email) {

                    indexForm.nameField.popUp.innerHTML = validator.messages.name;
                    indexForm.showError(indexForm.nameField);
                    indexForm.showError(indexForm.emailField);
                    /* костыль */
                    indexForm.emailField.popUp.style.display = 'none';

                } else {
                    /* если поле логина не верно */
                    if (validator.messages.name) {

                        indexForm.nameField.popUp.innerHTML = validator.messages.name;
                        indexForm.showError(indexForm.nameField);
                        indexForm.showCorrect(indexForm.emailField);

                    } else {
                        /* если поле пароля не верно */

                        indexForm.showCorrect(indexForm.nameField);
                        indexForm.emailField.popUp.innerHTML = validator.messages.email;
                        indexForm.showError(indexForm.emailField);

                    }
                }

            } else {

                indexForm.showCorrect(indexForm.nameField);
                indexForm.showCorrect(indexForm.emailField);

                // имитация отправки формы
                setTimeout(() => {
                    indexForm.resetField(indexForm.nameField, true);
                    indexForm.resetField(indexForm.emailField, true);

                    /* очистка texarea */
                    document.querySelector('.feedback-form__textarea').value = '';
                }, 200);

            }
        });
    }
    return {
        init: init
    }
})()

/* harmony default export */ __webpack_exports__["a"] = (worksFormValidation);

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
let slider = (function() {
    function init() {
        let mainSlide = [].slice.call(document.querySelectorAll('.photos-sl__item'));
        let worksNumber = mainSlide.length;

        /* Statement to all sliders. Main prop.  */
        let currentPos = 1;

        /* Description text slider */
        let descSlider = {
            title: document.querySelector('.description-sl__title'),
            skills: document.querySelector('.description-sl__skills'),
            params: [
                { id: 1, title: 'Сайт школы онлайн образования', skills: 'HTML , CSS, JAVASCRIPT' },
                { id: 2, title: 'Второй проект', skills: 'HTML , CSS, JAVASCRIPT' },
                { id: 3, title: 'Третий проект', skills: 'HTML , CSS, JAVASCRIPT' },
                { id: 4, title: 'Четвертый проект', skills: 'HTML , CSS, JAVASCRIPT' }
            ]
        }

        /* Button slider (previous work) */
        let prevBtnSlider = {
                elem: document.querySelector('.nav-btns__sl-btn_fill_prev').children[0],
                inc: -1,
                pos: changePos
            }
            /* Button slider (next work) */
        let nextBtnSlider = {
            elem: document.querySelector('.nav-btns__sl-btn_fill_next').children[0],
            inc: 1,
            pos: changePos
        }

        /* Need to correct displaing already loading document */
        reDrow();

        /* On click chenging currentPos and redrow all sliders  */
        prevBtnSlider.elem.parentNode.addEventListener('click', function() {
            currentPos = changePos(prevBtnSlider.inc);
            reDrow();
        })
        nextBtnSlider.elem.parentNode.addEventListener('click', function() {
            currentPos = changePos(nextBtnSlider.inc);
            reDrow();
        })

        /**
         * Chenge inner property of current slider position 
         * @param {*Number} inc 
         */
        function changePos(inc) {
            if (inc > 0) {
                return currentPos + inc > worksNumber ? 1 : currentPos + inc;
            } else {
                return currentPos + inc > 0 ? currentPos + inc : worksNumber;
            }
        }

        /**
         * Redrow slider section (all sliders). Depends of @currentPos global slider.
         */
        function reDrow() {
            /* calculating inner work numder to display */
            prevBtnSlider.elem.style.transform = 'translateY(-' + ((prevBtnSlider.pos(prevBtnSlider.inc)) - 1) + '00%)';
            nextBtnSlider.elem.style.transform = 'translateY(-' + ((nextBtnSlider.pos(nextBtnSlider.inc)) - 1) + '00%)';

            /* remove from all and add focuse class for current work  */
            mainSlide.forEach(function(element) {
                element.classList.remove('focus');
            });
            mainSlide[currentPos - 1].classList.add('focus');

            /* chenging fields value of descSlider and run smooth text appearance function  */
            descSlider.title.innerHTML = descSlider.params[currentPos - 1].title;
            descSlider.skills.innerHTML = descSlider.params[currentPos - 1].skills;
            smoothTextAppearance(descSlider.title);
            smoothTextAppearance(descSlider.skills);
        }

        /**
         * Sooth text appearance.
         * @param {*html element} elem 
         * @param {*Number} time for letter appearende. Default 60 ms
         */
        function smoothTextAppearance(elem, time = 30) {
            let elemInner = elem.innerHTML;
            let elemTimeoutcount = elemInner.length;
            elem.innerHTML = elem.innerHTML.replace(/./g, '<span class="hide-letter">$&</span>');

            // elem.innerHTML = elem.innerHTML.split('').map( el => `<span class="hide-letter">${el}</span>` ).join('');

            [].slice.call(elem.children).forEach((el, i) => {
                setTimeout(function() {
                    el.classList.add('show-letter')
                }, time * i);
            });

            /* приводим элемент в первоначальны вид. Появляется баг: если часто нажимать на кнопку текст дергается. Зато сохраняется принцип целостности*/
            setTimeout(() => {
                elem.innerHTML = elemInner;
            }, time * elemTimeoutcount)
        }
    }
    return {
        init: init
    }
})()

/* harmony default export */ __webpack_exports__["a"] = (slider);

/***/ })
/******/ ]);